<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.ibm.ace</groupId>
	<artifactId>Calculator_LIB</artifactId>
	<!-- For performing maven release, you would change it to snapshot version, e.g. 1.0.5-SNAPSHOT -->
	<version>1.0.0</version>
	<packaging>ace-bar</packaging>
	<name>${project.artifactId}</name>
	<build>
		<defaultGoal>package</defaultGoal>
		<resources>
			<resource>
				<directory>.</directory>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>ibm.maven.plugins</groupId>
				<artifactId>ace-maven-plugin</artifactId>
				<version>12.0.10-SNAPSHOT</version>
				<configuration>
					<!-- *************************************  
					     **        general settings         **
					     ************************************* -->
					<!-- installation directories for toolkit and server (runtime) -->
					<toolkitInstallDir>C:\PROGRA~1\IBM\ACE\12.0.6.0\tools</toolkitInstallDir>
					<aceRunDir>C:\PROGRA~1\IBM\ACE\12.0.6.0\server\bin</aceRunDir>
					<!--  additional properties with default values  -->
					<!-- (1) name of the resulting bar file 
					     default: ${project.build.directory}/ace/${project.artifactId}-${project.version}.bar 
					 	 <barName>${project.build.directory}/ace/${project.artifactId}.bar</barName> -->
					<!-- (2) tmp directory used for the windows mqsi cmd files 
					     default: ${project.build.directory}
					 	 <tmpFileDir>${project.build.directory}</tmpFileDir> -->
					<!-- (3) workspace directory  
					     default: ${project.build.directory}\..
					 	 <workspace>${project.build.directory}\..</workspace> -->
					<!-- (4) parameter to define if the source code should be added to a "bar package" 
						note: other packages currently not supported 
						default: true 
						<packageSource>true</packageSource> -->
					<!-- (5) paramter to define if 'java classloader" settings for Java Compute Nodes
						are allowed 
						default: false  -->
					<!-- <useClassloaders>true</useClassloaders> -->
					<!-- (6) parameter to define if the build should fail if 
						- classloaders are defined - but useClassloaders it set to false 
						- multiple different classloaders are defined
						default: true  -->
					<!-- <failOnInvalidClassloader>false</failOnInvalidClassloader> -->
					<!-- (7) parameter to set a custom maven settings file  
						- note: mqsicreatebar is using maven default settings 
						- when set a dedicated org.eclipse.m2e.core.prefs will be created for the Eclipse instance, started by mqsicreatebar
						- importand: requires escaping - see sample 
						default: ""  -->
					<!-- <customMavenSettings></customMavenSettings> 
						<customMavenSettings>${mavenSettings}</customMavenSettings> 
						sample 
						<customMavenSettings>C\:\\\\maven-test\\\\settings.xml</customMavenSettings>
						-->
					<!-- *************************************  
					     **        mqsicreatebar settings   **
					     ************************************* -->
					<!--  mqsicreate bar is used as default to create the bar file  -->
					<cleanBuild>true</cleanBuild>
					<deployAsSource>true</deployAsSource>
					<esql21>false</esql21>
					<!-- applicationName 
					default: ${project.artifactId} e.g. Sum_API
					<applicationName>...</applicationName>
					-->
					<!-- *************************************  
					     ** general overwrite settings      **
					     ************************************* -->
					<!--  general setting for overwrite ;  taken by mqsiapplyoverride AND ibmint apply overwrite 
					-->
					<!-- parameter ot define if an overwrite should happen -->
					<applyBarOverride>false</applyBarOverride>
					<!-- parameter to define if the build process should fail if 
					invalid properties were found -->
					<failOnInvalidProperties>false</failOnInvalidProperties>
					<!-- file to 'write' all found properties using mqsireadbar  
					default: ${project.build.directory}/ace/default.properties 
					<defaultPropertiesFile>...</defaultPropertiesFile>
					-->
					<!-- directory with properties files for 'mqsiapplybar override'; 
					taken into account when applyBarOverride is set to 'true' 
					default: ${project.basedir}/properties 
					important: the plugin will create one bar for each property file -->
					<!-- <configPropFileDirectory></configPropFileDirectory>-->
					<!-- *************************************  
					     **        ibmint settings          **
					     ************************************* -->
					<!-- ibmint can be used as alternative to mqsicreatebar  
					documentation see : https://www.ibm.com/docs/en/app-connect/12.0?topic=commands-ibmint-package-command-->
					<!-- defines if ibmint package should be used instead of mqsicreatebar; option; default: false -->
					<ibmint>true</ibmint>
					<!-- parameters  
					overrides-file filePath; optional; the name of the file that contains the overrides to apply.
					<overridesFile>filepath</overridesFile>
					keywords-file filePath; optional; the path of the file that contains the keywords to apply
					<keywordsFile>filepath</overridesFile>
					do-not-compile-java; optional; prevent compilation of Java resources; default false
					<doNotCompileJava>true</doNotCompileJava> 
					compile-maps-and-schemas; optional; enable compilation of maps and schemas; false
					<compileMapsAndSchemas></compileMapsAndSchemas> 
					mqsiTempWorkDir; optional; to set a specific pathj for the ibmint required mqsiworkdir directory 
					<mqsiTempWorkDir>/tmp/tmp-work-dir</mqsiTempWorkDir>
					ibmintResources; optional; if set to true resources files (stored under src/main/java) of dependent java projects are added to the java jar file
					<ibmintResources>true</ibmintResources>	
					-->
					<ibmintResources>true</ibmintResources>
				</configuration>
				<extensions>true</extensions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.3</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.5.3</version>
				<configuration>
					<workingDirectory>${perform.workspace}</workingDirectory>
				</configuration>
			</plugin>
			<!-- 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.8.2</version>
			</plugin>
			--> 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>3.0.0</version>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!-- Override version for maven-install-plugin because there are issues for install-plugin version > 3.x;  preventing installing only attached artefacts  -->
				<!-- See: https://issues.apache.org/jira/browse/MINSTALL-151 -->
				<!-- Option 1: use 2.x versions --> 
				<!-- 
				<plugin>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.5.2</version>
				</plugin>
				--> 
				<!-- Override version for maven-deploy-plugin because there is a similar bug in 3.0.0-M1 like the install-plugin -->
				<!-- 
				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.8.2</version>
				</plugin>
				--> 
				<!-- Option2: use maven-instal-plugin with allowIncompleteProjects flag--> 
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>3.1.1</version>
					<configuration>
						<allowIncompleteProjects>true</allowIncompleteProjects>
					</configuration>
				</plugin> 
			</plugins>
		</pluginManagement>
	</build>
	<!-- 
	<dependencies>
		<dependency>
			<groupId>com.ibm.ace.test</groupId>
			<version>1.0.0-SNAPSHOT</version>
			<artifactId>Java_LIB</artifactId>
			<type>pom</type>
			<scope>import</scope>
		</dependency>
	</dependencies>
	-->
</project>
